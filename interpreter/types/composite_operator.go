// Code generated by enum_generator; DO NOT EDIT.
//
//go:generate go run enum_generator.go CompositeOperator composite_operator.go
package types

import (
	"fmt"

	"go.starlark.net/starlark"
	"gopkg.in/gographics/imagick.v2/imagick"
)

type CompositeOperator struct {
	Value     imagick.CompositeOperator
	stringVal string
}

func (v CompositeOperator) String() string {
	return fmt.Sprintf("CompositeOperator %s", v.stringVal)
}

func (v CompositeOperator) Type() string {
	return "CompositeOperator"
}

func (v CompositeOperator) Freeze() {
	return
}

func (v CompositeOperator) Truth() starlark.Bool {
	return true
}

func (v CompositeOperator) Hash() (uint32, error) {
	return uint32(v.Value), nil
}

var _ starlark.Value = (*CompositeOperator)(nil)

var _CompositeOperatorMap = map[string]CompositeOperator{
	"COMPOSITE_OP_UNDEFINED":         {imagick.COMPOSITE_OP_UNDEFINED, "COMPOSITE_OP_UNDEFINED"},
	"COMPOSITE_OP_NO":                {imagick.COMPOSITE_OP_NO, "COMPOSITE_OP_NO"},
	"COMPOSITE_OP_MODULUS_ADD":       {imagick.COMPOSITE_OP_MODULUS_ADD, "COMPOSITE_OP_MODULUS_ADD"},
	"COMPOSITE_OP_ATOP":              {imagick.COMPOSITE_OP_ATOP, "COMPOSITE_OP_ATOP"},
	"COMPOSITE_OP_BLEND":             {imagick.COMPOSITE_OP_BLEND, "COMPOSITE_OP_BLEND"},
	"COMPOSITE_OP_BUMPMAP":           {imagick.COMPOSITE_OP_BUMPMAP, "COMPOSITE_OP_BUMPMAP"},
	"COMPOSITE_OP_CHANGE_MASK":       {imagick.COMPOSITE_OP_CHANGE_MASK, "COMPOSITE_OP_CHANGE_MASK"},
	"COMPOSITE_OP_CLEAR":             {imagick.COMPOSITE_OP_CLEAR, "COMPOSITE_OP_CLEAR"},
	"COMPOSITE_OP_COLOR_BURN":        {imagick.COMPOSITE_OP_COLOR_BURN, "COMPOSITE_OP_COLOR_BURN"},
	"COMPOSITE_OP_COLOR_DODGE":       {imagick.COMPOSITE_OP_COLOR_DODGE, "COMPOSITE_OP_COLOR_DODGE"},
	"COMPOSITE_OP_COLORIZE":          {imagick.COMPOSITE_OP_COLORIZE, "COMPOSITE_OP_COLORIZE"},
	"COMPOSITE_OP_COPY_BLACK":        {imagick.COMPOSITE_OP_COPY_BLACK, "COMPOSITE_OP_COPY_BLACK"},
	"COMPOSITE_OP_COPY_BLUE":         {imagick.COMPOSITE_OP_COPY_BLUE, "COMPOSITE_OP_COPY_BLUE"},
	"COMPOSITE_OP_COPY":              {imagick.COMPOSITE_OP_COPY, "COMPOSITE_OP_COPY"},
	"COMPOSITE_OP_COPY_CYAN":         {imagick.COMPOSITE_OP_COPY_CYAN, "COMPOSITE_OP_COPY_CYAN"},
	"COMPOSITE_OP_COPY_GREEN":        {imagick.COMPOSITE_OP_COPY_GREEN, "COMPOSITE_OP_COPY_GREEN"},
	"COMPOSITE_OP_COPY_MAGENTA":      {imagick.COMPOSITE_OP_COPY_MAGENTA, "COMPOSITE_OP_COPY_MAGENTA"},
	"COMPOSITE_OP_COPY_OPACITY":      {imagick.COMPOSITE_OP_COPY_OPACITY, "COMPOSITE_OP_COPY_OPACITY"},
	"COMPOSITE_OP_COPY_RED":          {imagick.COMPOSITE_OP_COPY_RED, "COMPOSITE_OP_COPY_RED"},
	"COMPOSITE_OP_COPY_YELLOW":       {imagick.COMPOSITE_OP_COPY_YELLOW, "COMPOSITE_OP_COPY_YELLOW"},
	"COMPOSITE_OP_DARKEN":            {imagick.COMPOSITE_OP_DARKEN, "COMPOSITE_OP_DARKEN"},
	"COMPOSITE_OP_DST_ATOP":          {imagick.COMPOSITE_OP_DST_ATOP, "COMPOSITE_OP_DST_ATOP"},
	"COMPOSITE_OP_DST":               {imagick.COMPOSITE_OP_DST, "COMPOSITE_OP_DST"},
	"COMPOSITE_OP_DST_IN":            {imagick.COMPOSITE_OP_DST_IN, "COMPOSITE_OP_DST_IN"},
	"COMPOSITE_OP_DST_OUT":           {imagick.COMPOSITE_OP_DST_OUT, "COMPOSITE_OP_DST_OUT"},
	"COMPOSITE_OP_DST_OVER":          {imagick.COMPOSITE_OP_DST_OVER, "COMPOSITE_OP_DST_OVER"},
	"COMPOSITE_OP_DIFFERENCE":        {imagick.COMPOSITE_OP_DIFFERENCE, "COMPOSITE_OP_DIFFERENCE"},
	"COMPOSITE_OP_DISPLACE":          {imagick.COMPOSITE_OP_DISPLACE, "COMPOSITE_OP_DISPLACE"},
	"COMPOSITE_OP_DISSOLVE":          {imagick.COMPOSITE_OP_DISSOLVE, "COMPOSITE_OP_DISSOLVE"},
	"COMPOSITE_OP_EXCLUSION":         {imagick.COMPOSITE_OP_EXCLUSION, "COMPOSITE_OP_EXCLUSION"},
	"COMPOSITE_OP_HARD_LIGHT":        {imagick.COMPOSITE_OP_HARD_LIGHT, "COMPOSITE_OP_HARD_LIGHT"},
	"COMPOSITE_OP_HUE":               {imagick.COMPOSITE_OP_HUE, "COMPOSITE_OP_HUE"},
	"COMPOSITE_OP_IN":                {imagick.COMPOSITE_OP_IN, "COMPOSITE_OP_IN"},
	"COMPOSITE_OP_LIGHTEN":           {imagick.COMPOSITE_OP_LIGHTEN, "COMPOSITE_OP_LIGHTEN"},
	"COMPOSITE_OP_LINEAR_LIGHT":      {imagick.COMPOSITE_OP_LINEAR_LIGHT, "COMPOSITE_OP_LINEAR_LIGHT"},
	"COMPOSITE_OP_LUMINIZE":          {imagick.COMPOSITE_OP_LUMINIZE, "COMPOSITE_OP_LUMINIZE"},
	"COMPOSITE_OP_MINUS_DST":         {imagick.COMPOSITE_OP_MINUS_DST, "COMPOSITE_OP_MINUS_DST"},
	"COMPOSITE_OP_MODULATE":          {imagick.COMPOSITE_OP_MODULATE, "COMPOSITE_OP_MODULATE"},
	"COMPOSITE_OP_MULTIPLY":          {imagick.COMPOSITE_OP_MULTIPLY, "COMPOSITE_OP_MULTIPLY"},
	"COMPOSITE_OP_OUT":               {imagick.COMPOSITE_OP_OUT, "COMPOSITE_OP_OUT"},
	"COMPOSITE_OP_OVER":              {imagick.COMPOSITE_OP_OVER, "COMPOSITE_OP_OVER"},
	"COMPOSITE_OP_OVERLAY":           {imagick.COMPOSITE_OP_OVERLAY, "COMPOSITE_OP_OVERLAY"},
	"COMPOSITE_OP_PLUS":              {imagick.COMPOSITE_OP_PLUS, "COMPOSITE_OP_PLUS"},
	"COMPOSITE_OP_REPLACE":           {imagick.COMPOSITE_OP_REPLACE, "COMPOSITE_OP_REPLACE"},
	"COMPOSITE_OP_SATURATE":          {imagick.COMPOSITE_OP_SATURATE, "COMPOSITE_OP_SATURATE"},
	"COMPOSITE_OP_SCREEN":            {imagick.COMPOSITE_OP_SCREEN, "COMPOSITE_OP_SCREEN"},
	"COMPOSITE_OP_SOFT_LIGHT":        {imagick.COMPOSITE_OP_SOFT_LIGHT, "COMPOSITE_OP_SOFT_LIGHT"},
	"COMPOSITE_OP_SRC_ATOP":          {imagick.COMPOSITE_OP_SRC_ATOP, "COMPOSITE_OP_SRC_ATOP"},
	"COMPOSITE_OP_SRC":               {imagick.COMPOSITE_OP_SRC, "COMPOSITE_OP_SRC"},
	"COMPOSITE_OP_SRC_IN":            {imagick.COMPOSITE_OP_SRC_IN, "COMPOSITE_OP_SRC_IN"},
	"COMPOSITE_OP_SRC_OUT":           {imagick.COMPOSITE_OP_SRC_OUT, "COMPOSITE_OP_SRC_OUT"},
	"COMPOSITE_OP_SRC_OVER":          {imagick.COMPOSITE_OP_SRC_OVER, "COMPOSITE_OP_SRC_OVER"},
	"COMPOSITE_OP_MODULUS_SUBTRACT":  {imagick.COMPOSITE_OP_MODULUS_SUBTRACT, "COMPOSITE_OP_MODULUS_SUBTRACT"},
	"COMPOSITE_OP_THRESHOLD":         {imagick.COMPOSITE_OP_THRESHOLD, "COMPOSITE_OP_THRESHOLD"},
	"COMPOSITE_OP_XOR":               {imagick.COMPOSITE_OP_XOR, "COMPOSITE_OP_XOR"},
	"COMPOSITE_OP_DIVIDE__DST":       {imagick.COMPOSITE_OP_DIVIDE__DST, "COMPOSITE_OP_DIVIDE__DST"},
	"COMPOSITE_OP_DISTORT":           {imagick.COMPOSITE_OP_DISTORT, "COMPOSITE_OP_DISTORT"},
	"COMPOSITE_OP_BLUR":              {imagick.COMPOSITE_OP_BLUR, "COMPOSITE_OP_BLUR"},
	"COMPOSITE_OP_PEGTOP_LIGHT":      {imagick.COMPOSITE_OP_PEGTOP_LIGHT, "COMPOSITE_OP_PEGTOP_LIGHT"},
	"COMPOSITE_OP_VIVID_LIGHT":       {imagick.COMPOSITE_OP_VIVID_LIGHT, "COMPOSITE_OP_VIVID_LIGHT"},
	"COMPOSITE_OP_PIN_LIGHT":         {imagick.COMPOSITE_OP_PIN_LIGHT, "COMPOSITE_OP_PIN_LIGHT"},
	"COMPOSITE_OP_LINEAR_DODGE":      {imagick.COMPOSITE_OP_LINEAR_DODGE, "COMPOSITE_OP_LINEAR_DODGE"},
	"COMPOSITE_OP_LINEAR_BURN":       {imagick.COMPOSITE_OP_LINEAR_BURN, "COMPOSITE_OP_LINEAR_BURN"},
	"COMPOSITE_OP_MATHEMATICS":       {imagick.COMPOSITE_OP_MATHEMATICS, "COMPOSITE_OP_MATHEMATICS"},
	"COMPOSITE_OP_DIVIDE_SRC":        {imagick.COMPOSITE_OP_DIVIDE_SRC, "COMPOSITE_OP_DIVIDE_SRC"},
	"COMPOSITE_OP_MINUS_SRC":         {imagick.COMPOSITE_OP_MINUS_SRC, "COMPOSITE_OP_MINUS_SRC"},
	"COMPOSITE_OP_DARKEN_INTENSITY":  {imagick.COMPOSITE_OP_DARKEN_INTENSITY, "COMPOSITE_OP_DARKEN_INTENSITY"},
	"COMPOSITE_OP_LIGHTEN_INTENSITY": {imagick.COMPOSITE_OP_LIGHTEN_INTENSITY, "COMPOSITE_OP_LIGHTEN_INTENSITY"},
}

var _CompositeOperatorNames = []string{
	"COMPOSITE_OP_UNDEFINED",
	"COMPOSITE_OP_NO",
	"COMPOSITE_OP_MODULUS_ADD",
	"COMPOSITE_OP_ATOP",
	"COMPOSITE_OP_BLEND",
	"COMPOSITE_OP_BUMPMAP",
	"COMPOSITE_OP_CHANGE_MASK",
	"COMPOSITE_OP_CLEAR",
	"COMPOSITE_OP_COLOR_BURN",
	"COMPOSITE_OP_COLOR_DODGE",
	"COMPOSITE_OP_COLORIZE",
	"COMPOSITE_OP_COPY_BLACK",
	"COMPOSITE_OP_COPY_BLUE",
	"COMPOSITE_OP_COPY",
	"COMPOSITE_OP_COPY_CYAN",
	"COMPOSITE_OP_COPY_GREEN",
	"COMPOSITE_OP_COPY_MAGENTA",
	"COMPOSITE_OP_COPY_OPACITY",
	"COMPOSITE_OP_COPY_RED",
	"COMPOSITE_OP_COPY_YELLOW",
	"COMPOSITE_OP_DARKEN",
	"COMPOSITE_OP_DST_ATOP",
	"COMPOSITE_OP_DST",
	"COMPOSITE_OP_DST_IN",
	"COMPOSITE_OP_DST_OUT",
	"COMPOSITE_OP_DST_OVER",
	"COMPOSITE_OP_DIFFERENCE",
	"COMPOSITE_OP_DISPLACE",
	"COMPOSITE_OP_DISSOLVE",
	"COMPOSITE_OP_EXCLUSION",
	"COMPOSITE_OP_HARD_LIGHT",
	"COMPOSITE_OP_HUE",
	"COMPOSITE_OP_IN",
	"COMPOSITE_OP_LIGHTEN",
	"COMPOSITE_OP_LINEAR_LIGHT",
	"COMPOSITE_OP_LUMINIZE",
	"COMPOSITE_OP_MINUS_DST",
	"COMPOSITE_OP_MODULATE",
	"COMPOSITE_OP_MULTIPLY",
	"COMPOSITE_OP_OUT",
	"COMPOSITE_OP_OVER",
	"COMPOSITE_OP_OVERLAY",
	"COMPOSITE_OP_PLUS",
	"COMPOSITE_OP_REPLACE",
	"COMPOSITE_OP_SATURATE",
	"COMPOSITE_OP_SCREEN",
	"COMPOSITE_OP_SOFT_LIGHT",
	"COMPOSITE_OP_SRC_ATOP",
	"COMPOSITE_OP_SRC",
	"COMPOSITE_OP_SRC_IN",
	"COMPOSITE_OP_SRC_OUT",
	"COMPOSITE_OP_SRC_OVER",
	"COMPOSITE_OP_MODULUS_SUBTRACT",
	"COMPOSITE_OP_THRESHOLD",
	"COMPOSITE_OP_XOR",
	"COMPOSITE_OP_DIVIDE__DST",
	"COMPOSITE_OP_DISTORT",
	"COMPOSITE_OP_BLUR",
	"COMPOSITE_OP_PEGTOP_LIGHT",
	"COMPOSITE_OP_VIVID_LIGHT",
	"COMPOSITE_OP_PIN_LIGHT",
	"COMPOSITE_OP_LINEAR_DODGE",
	"COMPOSITE_OP_LINEAR_BURN",
	"COMPOSITE_OP_MATHEMATICS",
	"COMPOSITE_OP_DIVIDE_SRC",
	"COMPOSITE_OP_MINUS_SRC",
	"COMPOSITE_OP_DARKEN_INTENSITY",
	"COMPOSITE_OP_LIGHTEN_INTENSITY",
}

type CompositeOperatorEnum struct{}

func (v CompositeOperatorEnum) String() string {
	return "CompositeOperatorEnum"
}

func (v CompositeOperatorEnum) Type() string {
	return "CompositeOperatorEnum"
}

func (v CompositeOperatorEnum) Freeze() {
	return
}

func (v CompositeOperatorEnum) Truth() starlark.Bool {
	return true
}

func (v CompositeOperatorEnum) Hash() (uint32, error) {
	return 0, nil
}

func (v CompositeOperatorEnum) Attr(name string) (starlark.Value, error) {
	val, found := _CompositeOperatorMap[name]
	if !found {
		return nil, starlark.NoSuchAttrError(fmt.Sprintf("unknown CompositeOperator %s", name))
	}
	return val, nil
}

func (v CompositeOperatorEnum) AttrNames() []string {
	return _CompositeOperatorNames
}

var _ starlark.Value = (*CompositeOperatorEnum)(nil)
var _ starlark.HasAttrs = (*CompositeOperatorEnum)(nil)
