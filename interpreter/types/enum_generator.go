//go:build ignore

package main

import (
	"bytes"
	"fmt"
	"go/ast"
	"go/build"
	"go/format"
	"go/parser"
	"go/token"
	"os"
	"text/template"
)

var codeTemplate = template.Must(template.New("").Parse(`// Code generated by enum_generator; DO NOT EDIT.
//go:generate go run enum_generator.go {{ .Type }} {{ .FileName }}
package types

import (
	"fmt"

	"go.starlark.net/starlark"
	"gopkg.in/gographics/imagick.v2/imagick"
)

type {{ .Type }} struct {
	Value     imagick.{{ .Type }}
	StringVal string
}

func (v {{ .Type }}) String() string {
	return fmt.Sprintf("{{ .Type }} %s", v.StringVal)
}

func (v {{ .Type }}) Type() string {
	return "{{ .Type }}"
}

func (v {{ .Type }}) Freeze() {
	return
}

func (v {{ .Type }}) Truth() starlark.Bool {
	return true
}

func (v {{ .Type }}) Hash() (uint32, error) {
	return uint32(v.Value), nil
}

var _ starlark.Value = (*{{ .Type }})(nil)

var _{{ .Type }}Map = map[string]{{ .Type }} {
	{{- range $val := .Values }}
	"{{ $val }}": { imagick.{{ $val }}, "{{ $val }}" },
	{{- end }}
}

type {{ .Type }}Enum struct {}

func (v {{ .Type }}Enum) String() string {
	return "{{ .Type }}Enum"
}

func (v {{ .Type }}Enum) Type() string {
	return "{{ .Type }}Enum"
}

func (v {{ .Type }}Enum) Freeze() {
	return
}

func (v {{ .Type }}Enum) Truth() starlark.Bool {
	return true
}

func (v {{ .Type }}Enum) Hash() (uint32, error) {
	return 0, nil
}

func (v {{ .Type }}Enum) Attr(name string) (starlark.Value, error) {
	val, found := _{{ .Type }}Map[name]
	if !found {
		return nil, starlark.NoSuchAttrError(fmt.Sprintf("unknown {{ .Type }} %s", name))
	}
	return val, nil
}

func (v {{ .Type }}Enum) AttrNames() []string {
	var attrNames []string

	for name := range _{{ .Type }}Map {
		attrNames = append(attrNames, name)
	}

	return attrNames
}

var _ starlark.Value = (*{{ .Type }}Enum)(nil)
var _ starlark.HasAttrs = (*{{ .Type }}Enum)(nil)
`))

func main() {
	typeName := os.Args[1]
	fileName := os.Args[2]

	path, err := build.Default.Import("gopkg.in/gographics/imagick.v2/imagick", ".", build.FindOnly)
	if err != nil {
		panic(err)
	}

	fset := token.NewFileSet()
	file, err := parser.ParseFile(
		fset,
		fmt.Sprintf("%s/%s", path.Dir, fileName),
		nil,
		parser.ParseComments,
	)
	if err != nil {
		panic(err)
	}

	var values []string

	ast.Inspect(file, func(node ast.Node) bool {
		value, ok := node.(*ast.ValueSpec)
		if !ok {
			return true
		}

		values = append(values, value.Names[0].Name)

		return true
	})

	outBuffer := new(bytes.Buffer)

	codeTemplate.Execute(
		outBuffer,
		struct {
			Type     string
			FileName string
			Values   []string
		}{
			Type:     typeName,
			FileName: fileName,
			Values:   values,
		},
	)

	formattedBytes, err := format.Source(outBuffer.Bytes())
	if err != nil {
		panic(err)
	}

	outFile, err := os.OpenFile(fileName, os.O_RDWR|os.O_CREATE|os.O_TRUNC, 0755)
	if err != nil {
		panic(err)
	}

	_, err = outFile.Write(formattedBytes)
	if err != nil {
		panic(err)
	}
}
